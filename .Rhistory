#https://stats.stackexchange.com/questions/299653/caret-glmnet-vs-cv-glmnet
grid =10^ seq (10,-2, length =100)
tunegrid <- expand.grid(alpha = 0,lambda=grid)
head(tunegrid)
modelFit_ridge <- train(Salary~.,data=trainSet, tuneGrid=tunegrid,
method = "glmnet", metric="RMSE",trControl = control)
modelFit_ridge$bestTune
coef(modelFit_ridge$finalModel, modelFit_ridge$bestTune$lambda)
pred_ridge <- predict(modelFit_ridge, testSet,na.action = na.pass)
#lasso
tunegrid <- expand.grid(alpha = 1,lambda=grid)
head(tunegrid)
modelFit_lasso <- train(Salary~.,data=trainSet, tuneGrid=tunegrid,
method = "glmnet", metric="RMSE",trControl = control)
modelFit_lasso$bestTune
#you can actually see several coefficients are 0
coef(modelFit_lasso$finalModel, modelFit_lasso$bestTune$lambda)
pred_lasso <- predict(modelFit_lasso, testSet,na.action = na.pass)
#final results
results=data.frame(actual=testSet$Salary,lm=pred_lm,ridge=pred_ridge,lasso=pred_lasso)
results=exp(results)
mean(abs(results$actual-results$lm)/results$actual)
mean(abs(results$actual-results$ridge)/results$actual)
mean(abs(results$actual-results$lasso)/results$actual)
library(dplyr)
library(ggplot2)
library(caret)
library("ISLR")
data("Hitters")
str(Hitters)
library(glmnet)
#na's per column
na_count <-sapply(Hitters, function(y) sum(length(which(is.na(y)))))
data.frame(na_count)
hitters=Hitters[complete.cases(Hitters),]
#skewed dataset
hist(hitters$Salary)
hitters$Salary=log(hitters$Salary)
#I do not want to scale the salary since I am predicting it
hitters_processed=preProcess(hitters[-19],c("scale","center"))
hitters=predict(hitters_processed,hitters)
#create train test set
index <- createDataPartition(hitters$Salary, p=0.85, list=FALSE)
trainSet <- hitters[ index,]
testSet <- hitters[-index,]
control <- trainControl(method="repeatedcv", number=10, repeats=3)
#intercept sucks so remove 0 here indicates no intercept
modelFit_lm <- train(Salary~0+.,data=trainSet,
method = "lm", metric="RMSE",trControl = control)
#plot(modelFit_lm$finalModel)
summary(modelFit_lm$finalModel)
pred_lm <- predict(modelFit_lm, testSet,na.action = na.pass)
#lets try ridge regression and lasso
#If alpha=0 then a ridge regression model is fit, and if alpha=1 then a lasso model is fit.
#https://stats.stackexchange.com/questions/299653/caret-glmnet-vs-cv-glmnet
grid =10^ seq (10,-2, length =100)
tunegrid <- expand.grid(alpha = 0,lambda=grid)
head(tunegrid)
modelFit_ridge <- train(Salary~.,data=trainSet, tuneGrid=tunegrid,
method = "glmnet", metric="RMSE",trControl = control)
modelFit_ridge$bestTune
coef(modelFit_ridge$finalModel, modelFit_ridge$bestTune$lambda)
pred_ridge <- predict(modelFit_ridge, testSet,na.action = na.pass)
#lasso
tunegrid <- expand.grid(alpha = 1,lambda=grid)
head(tunegrid)
modelFit_lasso <- train(Salary~.,data=trainSet, tuneGrid=tunegrid,
method = "glmnet", metric="RMSE",trControl = control)
modelFit_lasso$bestTune
#you can actually see several coefficients are 0
coef(modelFit_lasso$finalModel, modelFit_lasso$bestTune$lambda)
pred_lasso <- predict(modelFit_lasso, testSet,na.action = na.pass)
#finally trying random forest regression since I havent done that before in R
tunegrid <- expand.grid(.mtry=c(2:18))
head(trainSet)
dmy <- dummyVars(" ~ .", data = trainSet,fullRank = T)
train_transformed <- data.frame(predict(dmy, newdata = trainSet))
head(train_transformed)
pred_rf <- train(Salary~., data=train_transformed, method="rf", metric="RMSE", tuneGrid=tunegrid, trControl=control)
pred_rf
pred_rf <- train(Salary~., data=train_transformed, method="ranger", metric="RMSE", tuneGrid=tunegrid, trControl=control)
#finally trying random forest regression since I havent done that before in R
tunegrid <- expand.grid(mtry=c(2:18))
control <- trainControl(method="repeatedcv", number=10, repeats=3)
dmy <- dummyVars(" ~ .", data = trainSet,fullRank = T)
train_transformed <- data.frame(predict(dmy, newdata = trainSet))
pred_rf <- train(Salary~., data=train_transformed, method="ranger", metric="RMSE", tuneGrid=tunegrid, trControl=control)
tunegrid <- expand.grid(.mtry=c(2:18),.splitrule = "variance",
.min.node.size = c(10, 20))
control <- trainControl(method="repeatedcv", number=10, repeats=3)
dmy <- dummyVars(" ~ .", data = trainSet,fullRank = T)
train_transformed <- data.frame(predict(dmy, newdata = trainSet))
pred_rf <- train(Salary~., data=train_transformed, method="ranger", metric="RMSE", tuneGrid=tunegrid, trControl=control)
.splitrule = "gini",
.min.node.size = c(10, 20)
pred_rf
pred_random_forest <- predict(pred_rf, testSet,na.action = na.pass)
dmy <- dummyVars(" ~ .", data = testSet,fullRank = T)
test_transformed <- data.frame(predict(dmy, newdata = testSet))
pred_random_forest <- predict(pred_rf, test_transformed,na.action = na.pass)
#final results
results=data.frame(actual=testSet$Salary,lm=pred_lm,ridge=pred_ridge,
lasso=pred_lasso,random_forest=pred_random_forest)
results=exp(results)
mean(abs(results$actual-results$lm)/results$actual)
mean(abs(results$actual-results$ridge)/results$actual)
mean(abs(results$actual-results$lasso)/results$actual)
mean(abs(results$actual-results$random_forest)/results$actual)
library(dplyr)
library(ggplot2)
library(caret)
library("ISLR")
data("Hitters")
str(Hitters)
library(glmnet)
#na's per column
na_count <-sapply(Hitters, function(y) sum(length(which(is.na(y)))))
data.frame(na_count)
hitters=Hitters[complete.cases(Hitters),]
#skewed dataset
hist(hitters$Salary)
hitters$Salary=log(hitters$Salary)
#I do not want to scale the salary since I am predicting it
hitters_processed=preProcess(hitters[-19],c("scale","center"))
hitters=predict(hitters_processed,hitters)
#create train test set
index <- createDataPartition(hitters$Salary, p=0.85, list=FALSE)
trainSet <- hitters[ index,]
testSet <- hitters[-index,]
control <- trainControl(method="repeatedcv", number=10, repeats=3)
#intercept sucks so remove 0 here indicates no intercept
modelFit_lm <- train(Salary~0+.,data=trainSet,
method = "lm", metric="RMSE",trControl = control)
#plot(modelFit_lm$finalModel)
summary(modelFit_lm$finalModel)
pred_lm <- predict(modelFit_lm, testSet,na.action = na.pass)
#lets try ridge regression and lasso
#If alpha=0 then a ridge regression model is fit, and if alpha=1 then a lasso model is fit.
#https://stats.stackexchange.com/questions/299653/caret-glmnet-vs-cv-glmnet
grid =10^ seq (10,-2, length =100)
tunegrid <- expand.grid(alpha = 0,lambda=grid)
head(tunegrid)
modelFit_ridge <- train(Salary~.,data=trainSet, tuneGrid=tunegrid,
method = "glmnet", metric="RMSE",trControl = control)
modelFit_ridge$bestTune
coef(modelFit_ridge$finalModel, modelFit_ridge$bestTune$lambda)
pred_ridge <- predict(modelFit_ridge, testSet,na.action = na.pass)
#lasso
tunegrid <- expand.grid(alpha = 1,lambda=grid)
head(tunegrid)
modelFit_lasso <- train(Salary~.,data=trainSet, tuneGrid=tunegrid,
method = "glmnet", metric="RMSE",trControl = control)
modelFit_lasso$bestTune
#you can actually see several coefficients are 0
coef(modelFit_lasso$finalModel, modelFit_lasso$bestTune$lambda)
pred_lasso <- predict(modelFit_lasso, testSet,na.action = na.pass)
#finally trying random forest regression since I havent done that before in R
tunegrid <- expand.grid(.mtry=c(2:18),.splitrule = "variance",
.min.node.size = c(2, 10))
control <- trainControl(method="repeatedcv", number=10, repeats=3)
dmy <- dummyVars(" ~ .", data = trainSet,fullRank = T)
train_transformed <- data.frame(predict(dmy, newdata = trainSet))
model_rf <- train(Salary~., data=train_transformed, method="ranger", metric="RMSE", tuneGrid=tunegrid, trControl=control)
model_rf
dmy <- dummyVars(" ~ .", data = testSet,fullRank = T)
test_transformed <- data.frame(predict(dmy, newdata = testSet))
pred_random_forest <- predict(model_rf, test_transformed,na.action = na.pass)
#final results
results=data.frame(actual=testSet$Salary,lm=pred_lm,ridge=pred_ridge,
lasso=pred_lasso,random_forest=pred_random_forest)
results=exp(results)
mean(abs(results$actual-results$lm)/results$actual)
mean(abs(results$actual-results$ridge)/results$actual)
mean(abs(results$actual-results$lasso)/results$actual)
mean(abs(results$actual-results$random_forest)/results$actual)
head(results)
mean(abs(results$actual-results$random_forest)/results$actual)
library(dplyr)
library(ggplot2)
library(caret)
library("ISLR")
data("Hitters")
str(Hitters)
library(glmnet)
set.seed(3456)
#na's per column
na_count <-sapply(Hitters, function(y) sum(length(which(is.na(y)))))
data.frame(na_count)
hitters=Hitters[complete.cases(Hitters),]
#skewed dataset
hist(hitters$Salary)
hitters$Salary=log(hitters$Salary)
#I do not want to scale the salary since I am predicting it
hitters_processed=preProcess(hitters[-19],c("scale","center"))
hitters=predict(hitters_processed,hitters)
#create train test set
index <- createDataPartition(hitters$Salary, p=0.85, list=FALSE)
trainSet <- hitters[ index,]
testSet <- hitters[-index,]
control <- trainControl(method="repeatedcv", number=10, repeats=3)
#intercept sucks so remove 0 here indicates no intercept
modelFit_lm <- train(Salary~0+.,data=trainSet,
method = "lm", metric="RMSE",trControl = control)
#plot(modelFit_lm$finalModel)
summary(modelFit_lm$finalModel)
pred_lm <- predict(modelFit_lm, testSet,na.action = na.pass)
#lets try ridge regression and lasso
#If alpha=0 then a ridge regression model is fit, and if alpha=1 then a lasso model is fit.
#https://stats.stackexchange.com/questions/299653/caret-glmnet-vs-cv-glmnet
grid =10^ seq (10,-2, length =100)
tunegrid <- expand.grid(alpha = 0,lambda=grid)
head(tunegrid)
modelFit_ridge <- train(Salary~.,data=trainSet, tuneGrid=tunegrid,
method = "glmnet", metric="RMSE",trControl = control)
modelFit_ridge$bestTune
coef(modelFit_ridge$finalModel, modelFit_ridge$bestTune$lambda)
pred_ridge <- predict(modelFit_ridge, testSet,na.action = na.pass)
#lasso
tunegrid <- expand.grid(alpha = 1,lambda=grid)
head(tunegrid)
modelFit_lasso <- train(Salary~.,data=trainSet, tuneGrid=tunegrid,
method = "glmnet", metric="RMSE",trControl = control)
modelFit_lasso$bestTune
#you can actually see several coefficients are 0
coef(modelFit_lasso$finalModel, modelFit_lasso$bestTune$lambda)
pred_lasso <- predict(modelFit_lasso, testSet,na.action = na.pass)
#finally trying random forest regression since I havent done that before in R
tunegrid <- expand.grid(.mtry=c(2:18),.splitrule = "variance",
.min.node.size = c(2, 10))
control <- trainControl(method="repeatedcv", number=10, repeats=3)
dmy <- dummyVars(" ~ .", data = trainSet,fullRank = T)
train_transformed <- data.frame(predict(dmy, newdata = trainSet))
model_rf <- train(Salary~., data=train_transformed, method="ranger", metric="RMSE", tuneGrid=tunegrid, trControl=control)
dmy <- dummyVars(" ~ .", data = testSet,fullRank = T)
test_transformed <- data.frame(predict(dmy, newdata = testSet))
pred_random_forest <- predict(model_rf, test_transformed,na.action = na.pass)
#final results
results=data.frame(actual=testSet$Salary,lm=pred_lm,ridge=pred_ridge,
lasso=pred_lasso,random_forest=pred_random_forest)
results=exp(results)
mean(abs(results$actual-results$lm)/results$actual)
mean(abs(results$actual-results$ridge)/results$actual)
mean(abs(results$actual-results$lasso)/results$actual)
mean(abs(results$actual-results$random_forest)/results$actual)
?strptime
library(dplyr)
data=read.csv("datasets/sample.csv")
head(data)
sum(is.na(data))
data$typical_price=(data$High+data$Close+data$Low)/3
head(data)
dim(data)
df[-1,7]
data[-1,7]
data[-1,1]
diff <- data[-1,7] - data[-nrow(data),7]
diff
diff=diff.prepend(NA)
NA+diff
diff <- data[-1,7] - data[-nrow(data),7]
c(NA,diff)
diff <- data[-1,7] - data[-nrow(data),7]
data$money_flow=c(NA,diff)
data
data$positive_money_flow=data$money_flow*data$Volume
data$negative_money_flow=data$money_flow*data$Volume
head(data)
data$positive_money_flow=data$typical_price*data$Volume
data$negative_money_flow=data$typical_price*data$Volume
head(data)
?ifelse
data$positive_money_flow=iflelse(data$money_flow>0,data$typical_price*data$Volume,NA)
data$negative_money_flow=iflelse(data$money_flow>0,NA,data$typical_price*data$Volume)
data$positive_money_flow=ifelse(data$money_flow>0,data$typical_price*data$Volume,NA)
data$negative_money_flow=ifelse(data$money_flow>0,NA,data$typical_price*data$Volume)
head(data)
ma <- function(x,n=5){filter(x,rep(1/n,n), sides=2)}
data$positive_money_flow_sum=ma(data$positive_money_flow,10)
?filter
ma <- function(x,n=5){stats::filter(x,rep(1/n,n), sides=2)}
data$positive_money_flow_sum=ma(data$positive_money_flow,10)
data
?stats::filter
data$positive_money_flow_sum=ma(data$positive_money_flow,10)
data$negative_money_flow_sum=ma(data$negative_money_flow,10)
data$money_ratio=data$positive_money_flow_sum/negative_money_flow_sum
data$positive_money_flow_sum=ma(data$positive_money_flow,10)
data$negative_money_flow_sum=ma(data$negative_money_flow,10)
data$money_ratio=data$positive_money_flow_sum/negative_money_flow_sum
head(data)
data$money_flow_index=100*data$money_ratio/(1+data$money_ratio)
#head(data)
#no missing values
sum(is.na(data))
data$money_ratio=data$positive_money_flow_sum/data$negative_money_flow_sum
data$money_flow_index=100*data$money_ratio/(1+data$money_ratio)
sum(1,2)
x=c(1,2,3,4)
library(zoo)
rollapply(data$positive_money_flow, width=10, FUN=function(x) mean(x, na.rm=TRUE), by=1, by.column=TRUE, partial=TRUE, fill=NA, align="right")
rollapply(data$positive_money_flow, width=10, FUN=function(x) mean(x, na.rm=TRUE), by=10, by.column=TRUE, partial=TRUE, fill=NA, align="right")
?zoo::rollapply
rollapply(data$positive_money_flow, width=10, FUN=function(x) mean(x, na.rm=TRUE), by=1, by.column=TRUE, partial=TRUE, fill=NA, align="right")
head(data)
rollapply(data$positive_money_flow, width=10, FUN=function(x) mean(x, na.rm=TRUE), by=1, by.column=TRUE, partial=FALSE, fill=NA, align="right")
data$positive_money_flow_sum=zoo::rollapply(data$positive_money_flow, width=10, FUN=function(x) mean(x, na.rm=TRUE), by=1, by.column=TRUE, partial=FALSE, fill=NA, align="right")
data$negative_money_flow_sum=zoo::rollapply(data$negative_money_flow, width=10, FUN=function(x) mean(x, na.rm=TRUE), by=1, by.column=TRUE, partial=FALSE, fill=NA, align="right")
data$money_ratio=data$positive_money_flow_sum/data$negative_money_flow_sum
data$money_flow_index=100*data$money_ratio/(1+data$money_ratio)
colanmes(data)
colnames(data)
colnames(data[,-13])
dplyr::rename()
data=dplyr::rename(data, Money Flow = money_flow, Positive Money Flow Sum = positive_money_flow_sum)
colnames(data)
colnames(data)=c("Day","Open","High",
"Low" ,"Close","Volume",
"Typical Price","Money Flow","Positive Money Flow",
"negative_money_flow"     "Positive Money Flow Sum" "Negative Money Flow Sum",
"Money Ratio","Money Flow Index" )
colnames(data)=c("Day","Open","High",
"Low" ,"Close","Volume",
"Typical Price","Money Flow","Positive Money Flow",
"negative_money_flow"  ,   "Positive Money Flow Sum" "Negative Money Flow Sum",
"Money Ratio","Money Flow Index" )
colnames(data)=c("Day","Open","High",
"Low" ,"Close","Volume",
"Typical Price","Money Flow","Positive Money Flow",
"Negative Money Flow"  ,   "Positive Money Flow Sum", "Negative Money Flow Sum",
"Money Ratio","Money Flow Index" )
data=read.csv("datasets/sample.csv")
#head(data)
#no missing values
sum(is.na(data))
data$typical_price=(data$High+data$Close+data$Low)/3
head(data)
diff <- data[-1,7] - data[-nrow(data),7]
data$money_flow=c(NA,diff)
data$positive_money_flow=ifelse(data$money_flow>0,data$typical_price*data$Volume,NA)
data$negative_money_flow=ifelse(data$money_flow>0,NA,data$typical_price*data$Volume)
data$positive_money_flow_sum=zoo::rollapply(data$positive_money_flow, width=10, FUN=function(x) mean(x, na.rm=TRUE), by=1, by.column=TRUE, partial=FALSE, fill=NA, align="right")
data$negative_money_flow_sum=zoo::rollapply(data$negative_money_flow, width=10, FUN=function(x) mean(x, na.rm=TRUE), by=1, by.column=TRUE, partial=FALSE, fill=NA, align="right")
data$money_ratio=data$positive_money_flow_sum/data$negative_money_flow_sum
data$money_flow_index=100*data$money_ratio/(1+data$money_ratio)
data=data[,-13]
colnames(data)=c("Day","Open","High",
"Low" ,"Close","Volume",
"Typical Price","Money Flow","Positive Money Flow",
"Negative Money Flow"  ,   "Positive Money Flow Sum", "Negative Money Flow Sum",
"Money Ratio","Money Flow Index" )
colnames(data)=c("Day","Open","High",
"Low" ,"Close","Volume",
"Typical Price","Money Flow","Positive Money Flow",
"Negative Money Flow"  ,   "Positive Money Flow Sum", "Negative Money Flow Sum",
"Money Flow Index" )
head(data)
data
data=read.csv("datasets/sample.csv")
#head(data)
#no missing values
sum(is.na(data))
data$typical_price=(data$High+data$Close+data$Low)/3
head(data)
diff <- data[-1,7] - data[-nrow(data),7]
data$money_flow=c(NA,diff)
data$positive_money_flow=ifelse(data$money_flow>0,data$typical_price*data$Volume,NA)
data$negative_money_flow=ifelse(data$money_flow>0,NA,data$typical_price*data$Volume
)
head(data)
?zoo::rollapply
data$positive_money_flow_sum=zoo::rollapply(data$positive_money_flow, width=10, FUN=function(x) mean(x, na.rm=TRUE), by=1, by.column=FALSE, partial=FALSE, fill=NA, align="right")
head(data)
data
data$positive_money_flow_sum=zoo::rollapply(data$positive_money_flow, width=10, FUN=function(x) mean(x, na.omit=TRUE), by=1, by.column=FALSE, partial=FALSE, fill=NA, align="right")
data$positive_money_flow_sum=zoo::rollapply(data$positive_money_flow, width=10, FUN=function(x) mean(x, na.omit=TRUE), by=1, by.column=TRUE, partial=FALSE, fill=NA, align="right")
data$negative_money_flow_sum=zoo::rollapply(data$negative_money_flow, width=10, FUN=function(x) mean(x, na.omit=TRUE), by=1, by.column=TRUE, partial=FALSE, fill=NA, align="right")
data
data$positive_money_flow_sum=zoo::rollapply(data$positive_money_flow, width=10, FUN=function(x) mean(x, na.pass=TRUE), by=1, by.column=TRUE, partial=FALSE, fill=NA, align="right")
data$negative_money_flow_sum=zoo::rollapply(data$negative_money_flow, width=10, FUN=function(x) mean(x, na.pass=TRUE), by=1, by.column=TRUE, partial=FALSE, fill=NA, align="right")
head(data)
data
expected=data=read.csv("datasets/sample_output_10.csv")
expected
data=read.csv("datasets/sample.csv")
#head(data)
#no missing values
sum(is.na(data))
data$typical_price=(data$High+data$Close+data$Low)/3
head(data)
diff <- data[-1,7] - data[-nrow(data),7]
data$money_flow=c(NA,diff)
data$positive_money_flow=ifelse(data$money_flow>0,data$typical_price*data$Volume,NA)
data$negative_money_flow=ifelse(data$money_flow>0,NA,data$typical_price*data$Volume)
data$positive_money_flow_sum=zoo::rollapply(data$positive_money_flow, width=10, FUN=function(x) mean(x, na.rm=TRUE), by=1, by.column=TRUE, partial=FALSE, fill=NA, align="right")
data$negative_money_flow_sum=zoo::rollapply(data$negative_money_flow, width=10, FUN=function(x) mean(x, na.rm=TRUE), by=1, by.column=TRUE, partial=FALSE, fill=NA, align="right")
data$money_ratio=data$positive_money_flow_sum/data$negative_money_flow_sum
data$money_flow_index=100*data$money_ratio/(1+data$money_ratio)
data=data[,-13]
colnames(data)=c("Day","Open","High",
"Low" ,"Close","Volume",
"Typical Price","Money Flow","Positive Money Flow",
"Negative Money Flow"  ,   "Positive Money Flow Sum", "Negative Money Flow Sum",
"Money Flow Index" )
data
expected
expected=data=read.csv("datasets/sample_output_10.csv")
expected=data=read.csv("datasets/sample_output_10.csv")
expected
TTR::SMA(data$Negative.Money.Flow)
TTR::SMA(data$Negative.Money.Flow,10,na.rm=TRUE)
TTR::SMA(data$Negative.Money.Flow,10,na.pass(TRUE))
TTR::SMA(data$Negative.Money.Flow,10,na.action=na.pass)
?TTR:SMA
?TTR::SMA
TTR::SMA(data$Negative.Money.Flow,na.action=na.pass)
?zoo::rollapply
data=read.csv("datasets/sample.csv")
#head(data)
#no missing values
sum(is.na(data))
data$typical_price=(data$High+data$Close+data$Low)/3
head(data)
diff <- data[-1,7] - data[-nrow(data),7]
data$money_flow=c(NA,diff)
data$positive_money_flow=ifelse(data$money_flow>0,data$typical_price*data$Volume,NA)
data$negative_money_flow=ifelse(data$money_flow>0,NA,data$typical_price*data$Volume)
data$positive_money_flow_sum=zoo::rollapply(data$positive_money_flow, width=10, FUN=function(x) mean(x, na.action=na.pass), by=1, by.column=TRUE, partial=FALSE, fill=NA, align="right")
data$negative_money_flow_sum=zoo::rollapply(data$negative_money_flow, width=10, FUN=function(x) mean(x, na.action=na.pass), by=1, by.column=TRUE, partial=FALSE, fill=NA, align="right")
data$money_ratio=data$positive_money_flow_sum/data$negative_money_flow_sum
data$money_flow_index=100*data$money_ratio/(1+data$money_ratio)
data=data[,-13]
colnames(data)=c("Day","Open","High",
"Low" ,"Close","Volume",
"Typical Price","Money Flow","Positive Money Flow",
"Negative Money Flow"  ,   "Positive Money Flow Sum", "Negative Money Flow Sum",
"Money Flow Index" )
data
?na.pass
data$positive_money_flow_sum=zoo::rollapply(data$positive_money_flow, width=10, FUN=function(x) mean(x, na.action=na.omit), by=1, by.column=TRUE, partial=FALSE, fill=NA, align="right")
data$negative_money_flow_sum=zoo::rollapply(data$negative_money_flow, width=10, FUN=function(x) mean(x, na.action=na.omit), by=1, by.column=TRUE, partial=FALSE, fill=NA, align="right")
data=read.csv("datasets/sample.csv")
#head(data)
#no missing values
sum(is.na(data))
data$typical_price=(data$High+data$Close+data$Low)/3
head(data)
diff <- data[-1,7] - data[-nrow(data),7]
data$money_flow=c(NA,diff)
data$positive_money_flow=ifelse(data$money_flow>0,data$typical_price*data$Volume,NA)
data$negative_money_flow=ifelse(data$money_flow>0,NA,data$typical_price*data$Volume)
data$positive_money_flow_sum=zoo::rollapply(data$positive_money_flow, width=10, FUN=function(x) mean(x, na.action=na.omit), by=1, by.column=TRUE, partial=FALSE, fill=NA, align="right")
data$negative_money_flow_sum=zoo::rollapply(data$negative_money_flow, width=10, FUN=function(x) mean(x, na.action=na.omit), by=1, by.column=TRUE, partial=FALSE, fill=NA, align="right")
data$money_ratio=data$positive_money_flow_sum/data$negative_money_flow_sum
data$money_flow_index=100*data$money_ratio/(1+data$money_ratio)
data=data[,-13]
colnames(data)=c("Day","Open","High",
"Low" ,"Close","Volume",
"Typical Price","Money Flow","Positive Money Flow",
"Negative Money Flow"  ,   "Positive Money Flow Sum", "Negative Money Flow Sum",
"Money Flow Index" )
data
DF <- data.frame(x = c(1, 2, 3), y = c(0, 10, NA))
DF
na.omit(DF)
data=read.csv("datasets/sample.csv")
#head(data)
#no missing values
sum(is.na(data))
data$typical_price=(data$High+data$Close+data$Low)/3
head(data)
diff <- data[-1,7] - data[-nrow(data),7]
data$money_flow=c(NA,diff)
data$positive_money_flow=ifelse(data$money_flow>0,data$typical_price*data$Volume,NA)
data$negative_money_flow=ifelse(data$money_flow>0,NA,data$typical_price*data$Volume)
data$positive_money_flow_sum=zoo::rollapply(data$positive_money_flow, width=10, FUN=function(x) mean(x, na.action=na.exclude), by=1, by.column=TRUE, partial=FALSE, fill=NA, align="right")
data$negative_money_flow_sum=zoo::rollapply(data$negative_money_flow, width=10, FUN=function(x) mean(x, na.action=na.exclude), by=1, by.column=TRUE, partial=FALSE, fill=NA, align="right")
data$money_ratio=data$positive_money_flow_sum/data$negative_money_flow_sum
data$money_flow_index=100*data$money_ratio/(1+data$money_ratio)
data
data=read.csv("datasets/sample.csv")
#head(data)
#no missing values
sum(is.na(data))
data$typical_price=(data$High+data$Close+data$Low)/3
head(data)
diff <- data[-1,7] - data[-nrow(data),7]
data$money_flow=c(NA,diff)
data$positive_money_flow=ifelse(data$money_flow>0,data$typical_price*data$Volume,NA)
data$negative_money_flow=ifelse(data$money_flow>0,NA,data$typical_price*data$Volume)
data$positive_money_flow_sum=zoo::rollapply(data$positive_money_flow, width=10, FUN=function(x) mean(x, na.rm = TRUE), by=1, by.column=TRUE, partial=FALSE, fill=NA, align="right")
data$negative_money_flow_sum=zoo::rollapply(data$negative_money_flow, width=10, FUN=function(x) mean(x, na.rm=TRUE), by=1, by.column=TRUE, partial=FALSE, fill=NA, align="right")
data$money_ratio=data$positive_money_flow_sum/data$negative_money_flow_sum
data$money_flow_index=100*data$money_ratio/(1+data$money_ratio)
data=data[,-13]
colnames(data)=c("Day","Open","High",
"Low" ,"Close","Volume",
"Typical Price","Money Flow","Positive Money Flow",
"Negative Money Flow"  ,   "Positive Money Flow Sum", "Negative Money Flow Sum",
"Money Flow Index" )
data
mean(c(1,2,3,4,5))
mean(c(1,2,3,4,NA),na.rm = TRUE)
mean(c(1,2,3,4,NA),na.action=na.omit())
mean(c(1,2,3,4,NA),na.action=na.omit)
mean(c(1,2,3,4,NA),na.action=na.exclude())
mean(c(1,2,3,4,NA),na.action=na.pass)
exclude
expected=data=read.csv("datasets/sample_output_10.csv")
expected
(235353.21+89160.60+188382.99+44863.20)/4
(235353.21+89160.60+188382.99+44863.20)/10
(235353.21+89160.60+188382.99+44863.20)/4
